Description: workaround for rust ld issue 
 refer to: https://salsa.debian.org/chromium-team/chromium/-/blob/master/debian/patches/ppc64le/fixes/fix-rust-linking.patch?ref_type=heads
Author: BO YU <tsu.yubo@gmail.com> 
Last-Update: 2024-01-29
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/build/toolchain/gcc_toolchain.gni
+++ b/build/toolchain/gcc_toolchain.gni
@@ -441,7 +441,7 @@
         # -soname flag is not available on aix ld
         soname_flag = "-Wl,-soname=\"$soname\""
       }
-      if (target_cpu == "ppc64") {
+      if (target_cpu == "ppc64" || target_cpu == "riscv64") {
         # Work around linker failures due to Rust libraries and the use of whole-archive
         link_command = "$ld -shared $soname_flag -Wl,--start-group {{ldflags}}${extra_ldflags} -o \"$unstripped_sofile\" @\"$rspfile\" {{rlibs}} -Wl,--end-group"
       }
@@ -559,7 +559,7 @@
         whole_archive_flag = "-Wl,--whole-archive"
         no_whole_archive_flag = "-Wl,--no-whole-archive"
       }
-      if (target_cpu == "ppc64") {
+      if (target_cpu == "ppc64" || target_cpu == "riscv64") {
         # Work around linker failures due to Rust libraries and the use of whole-archive
         command = "$ld -shared -Wl,--start-group {{ldflags}}${extra_ldflags} -o \"$unstripped_sofile\" $soname_flag @\"$rspfile\" -Wl,--end-group"
       }
@@ -629,8 +629,12 @@
       # We need to specify link groups, at least, for single pass linkers. I.e.
       # Rust libraries are alpha-sorted instead of by dependencies so they fail
       # to link if not properly ordered or grouped.
-      link_command = "$ld {{ldflags}}${extra_ldflags} -o \"$unstripped_outfile\" $start_group_flag @\"$rspfile\" $end_group_flag {{solibs}} {{libs}} $start_group_flag {{rlibs}} $end_group_flag"
-
+      if (target_cpu == "riscv64") {
+        link_command = "$ld -Wl,--start-group {{ldflags}}${extra_ldflags} -o \"$unstripped_outfile\" @\"$rspfile\" {{solibs}} {{libs}} {{rlibs}} -Wl,--end-group"
+      }
+      else {
+        link_command = "$ld {{ldflags}}${extra_ldflags} -o \"$unstripped_outfile\" $start_group_flag @\"$rspfile\" $end_group_flag {{solibs}} {{libs}} $start_group_flag {{rlibs}} $end_group_flag"
+      }
       # Generate a map file to be used for binary size analysis.
       # Map file adds ~10% to the link time on a z620.
       # With target_os="android", libchrome.so.map.gz is ~20MB.
